{"pages":[{"title":"about","text":"","link":"/about/index-1.html"},{"title":"about","text":"","link":"/about/index-2.html"},{"title":"Minos - A Hexo theme","text":"","link":"/about/index.html"}],"posts":[{"title":"What's THIS in JavaScript ?","text":"前言常常出現以及使用的 似乎是一個常見又難纏的敵人，以下整理及提供一些資料參考。1234567### 由物件導向的角度開始探討試宣告了一個 class ```Car``` ，我們可以使用兩個 methods ( setName and getName )，並在裡面使用 ```this.name``` 存取 instance 的屬性，由此可見這裡的 ```this``` 指的對象就是 instance 本身 ( ```myCar``` )。&lt;!-- more --&gt; class Car { setName(name) { this.name = name } getName() { return this.name }} const myCar = new Car()myCar.setName(‘hello’)console.log(myCar.getName()) // hello12345678### 物件導向之外情況 - 嚴格模式下 =&gt; undefined - 非嚴格模式，且在瀏覽器下執行 =&gt; window - 非嚴格模式，且在 node.js 下執行 =&gt; global### 更改 this 值儘管 this 可能有預設值，但仍可透過一些方法去修改： ‘use strict’;function hello(a, b){ console.log(this, a, b)} hello(1, 2) // undefined 1 2hello.call(undefined, 1, 2) // undefined 1 2hello.apply(undefined, [1, 2]) // undefined 1 2123456789101112 - 直接呼叫 function * 上述程式碼可以從 function `hello` 可以 log 出 ```this``` 的值和 a, b 兩個參數，因此在呼叫 ```hello(1, 2)``` 的時候，在嚴格模式下 ```this``` 會是 ```undefined``` ， 而 a, b 分別為 1, 2。- 使用 ```call``` 和 ```apply``` 方式呼叫 function。 * 當使用 ```hello.call(undefined, 1, 2)``` 的時候，會發現回傳結果和呼叫 `hello(1, 2)` 相同。 * 若使用 `hello.apply(undefined, [1, 2])` 回傳值也是相同，差別部分在於傳進去的參數需要是 array 。 * 回到上述未解的問題，也就是一直為 `undefined` 的那項參數 =&gt; `this` 的值，以下舉例說明： - example 01 : &apos;use strict&apos;; function hello(a, b){ console.log(this, a, b) } hello.call(&apos;yo&apos;, 1, 2) // yo 1 2 hello.apply(&apos;hihihi&apos;, [1, 2]) // hihihi 1 2 123### 物件中的 this除了物件導向 class 中的 this ，接續探討一般 JavaScript 中的 object 的情況。首先先宣告一項物件：const obj = { value: 1, hello: function() { console.log(this.value) }} obj.hello() // 112345這邊所強調的重點為：&gt; `this` 的值與作用域或程式碼順序 / 位置無關，而是和如何呼叫有關。`this` 的值會根據使用者如何呼叫 function 而不同，就如同上述所提的三種方式： `call`, `apply` and `bind` ，因此也就可以使用不同的方式呼叫 function 使 `this` 值有所不同。 - Step 1 : const obj = { value: 1, hello: function() { console.log(this.value) } } obj.hello() // 1 const hey = obj.hello hey() // undefined 123456789---### 在 ES6 的 Arrow Function ( 箭頭函式 ) 中在 ES6 要注意的是：&gt; 變數宣告的地方的 `this` 就是變數的 `this` 。 - example : 在 function `hello` 中宣告 arrow function `test` ， Reference 淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂 What’s THIS in JavaScript ?","link":"/2019/09/25/What's THIS in JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"}],"categories":[{"name":"Documentation","slug":"Documentation","link":"/categories/Documentation/"}]}